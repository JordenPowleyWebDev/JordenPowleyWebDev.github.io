/*
 * ------------------------------------------------
 *
 * Mixins
 *
 * ------------------------------------------------
 */

@import "./variables.scss";

/*
 * ------------------------------------------------
 *
 * Breakpoints
 *
 * ------------------------------------------------
 */

@mixin breakpoint ($min: 0, $max: 0) {
  $type: type-of($min);
  @if $type == string {
    @if $min == sm {
      // Phones
      @media (max-width: ($small - 1)) { @content; }
    }
    @else if $min == md {
      // Tablets
      @media (max-width: $medium) { @content; }
    }
    @else if $min == lg {
      // Desktops
      @media (max-width: $large) { @content; }
    }
    @else if $min == xl {
      // Widescreen Desktops
      @media (max-width: $extraLarge) { @content; }
    }
    @else {
      // Otherwise pass a warning to the compiler as to the appropriate options
      @warn "The breakpoint mixin supports the following attributes: sm, md, lg, xl";
    }
  }
  @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
    @media #{$query} { @content; }
  }
}

/*
 * ------------------------------------------------
 *
 * Prefixer
 *
 * ------------------------------------------------
 */

@mixin prefixer ($property, $value) {
  #{'-ms-' + $property}: $value;
  #{'-o-' + $property}: $value;
  #{'-moz-' + $property}: $value;
  #{'-webkit-' + $property}: $value;
  #{$property}: $value;
}

/*
 * ------------------------------------------------
 *
 * Font Sizes
 *
 * ------------------------------------------------
 */

@mixin font-size($size, $min: 0) {
  $relative: $size / $baseFontSize;
  font-size: $relative * 1rem;
  @if $min != 0 {
    $ratio: $min / $size;
    $calculatedmaxwidth: ($extraLarge * $ratio);
    @media (max-width: #{$calculatedmaxwidth}) {
      font-size: #{$min};
    }
  }
}

@mixin center {
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  min-width: $extraLarge;
  background-position: center bottom;
  background-repeat: no-repeat;
  background-size: cover;
  @media (max-width: $large) {
    min-width: 0;
    width: 100%;
    left: auto;
    transform: none;
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}